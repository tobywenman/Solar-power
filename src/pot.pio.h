// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// pot //
// --- //

#define pot_wrap_target 0
#define pot_wrap 4

static const uint16_t pot_program_instructions[] = {
            //     .wrap_target
    0x6027, //  0: out    x, 7                       
    0x6001, //  1: out    pins, 1                    
    0xe001, //  2: set    pins, 1                    
    0xe000, //  3: set    pins, 0                    
    0x0042, //  4: jmp    x--, 2                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pot_program = {
    .instructions = pot_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config pot_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pot_wrap_target, offset + pot_wrap);
    return c;
}

#include "hardware/clocks.h"
void pot_program_setup(PIO pio, uint sm, uint offset, uint inc, uint upDown,float freq){
    pio_gpio_init(pio,inc);
    pio_sm_set_consecutive_pindirs(pio, sm, inc, 1, true);
    pio_gpio_init(pio,upDown);
    pio_sm_set_consecutive_pindirs(pio, sm, upDown, 1, true);
    pio_sm_config c = pot_program_get_default_config(offset);
    sm_config_set_set_pins(&c,inc,1);
    sm_config_set_out_pins(&c,upDown,1);
    float div = clock_get_hz(clk_sys) / (freq); 
    sm_config_set_clkdiv(&c, div);
    sm_config_set_out_shift(&c, true, true, 8);
    pio_sm_init(pio,sm,offset,&c);
}

#endif

